import { stat } from 'fs'
import * as THREE from '/build/three.module.js'
import { OrbitControls } from '/jsm/controls/OrbitControls'
import Stats from '/jsm/libs/stats.module'
import {GUI} from '/jsm/libs/dat.gui.module'

const scene: THREE.Scene = new THREE.Scene()

//import helper axis 
var axesHelper = new THREE.AxesHelper(10);
scene.add(axesHelper);

// scene.background = new THREE.Color(0x230000);

const camera: THREE.PerspectiveCamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 2000)

const renderer: THREE.WebGLRenderer = new THREE.WebGLRenderer({antialias: true})
renderer.setSize(window.innerWidth, window.innerHeight)
document.body.appendChild(renderer.domElement)

//orbit controls
const controls = new OrbitControls(camera, renderer.domElement)
controls.addEventListener('change', render);

//geometry 
const geometry: THREE.BoxGeometry = new THREE.BoxGeometry()
const sphereGeometry: THREE.SphereGeometry = new THREE.SphereGeometry();
const isosahedronGeometry: THREE.IcosahedronGeometry = new THREE.IcosahedronGeometry();
//materials
const material: THREE.MeshBasicMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, wireframe: true });

//*adding geometry and sphere together into the screen
//& cube
const cube: THREE.Mesh = new THREE.Mesh(geometry, material)
scene.add(cube)
//& sphere 
const sphere: THREE.Mesh = new THREE.Mesh(sphereGeometry, material);
scene.add(sphere);
sphere.position.x = 5;
//& icosahedron
const icosahedron: THREE.Mesh = new THREE.Mesh(isosahedronGeometry, material);
scene.add(icosahedron);
icosahedron.position.z = 5;
//camer positions 
camera.position.z = 5

//* server stats(FPS)
const stats = Stats()
document.body.appendChild(stats.dom)

//* gui controls to the right 
const gui = new GUI();
gui.open();

//& for the box geometry 
const cubeFolder = gui.addFolder("cube");

// rotation
const rotation = cubeFolder.addFolder("rotation");
rotation.add(cube.rotation, "x", 0, Math.PI*2, 0.01);
rotation.add(cube.rotation, "y", 0, Math.PI*2, 0.01);
rotation.add(cube.rotation, "z", 0, Math.PI*2, 0.01);
//camera z position
const cameraFolder = cubeFolder.addFolder("camera");
cameraFolder.add(camera.position, 'z', 0,10, 0.01);
//cube position x, y and z
const positionFolder = cubeFolder.addFolder("Position");
positionFolder.add(cube.position, 'x', -10, 10);
positionFolder.add(cube.position, 'y', -10, 10);
positionFolder.add(cube.position, 'z', -10, 10);
//scale cube
const scaleFolder = cubeFolder.addFolder("Scale");
scaleFolder.add(cube.scale, 'x', 0, 5, .1)
scaleFolder.add(cube.scale, 'y', 0, 5, .1)
scaleFolder.add(cube.scale, 'z', 0, 5, .1)

cubeFolder.add(cube, 'visible', true)
// cubeFolder.open();

//Geometries property folder
//& const geometry: THREE.BoxGeometry = new THREE.BoxGeometry()

var cubeData = {
    width: 1,
    height: 1,
    depth: 1,
    widthSegments: 1,
    heightSegments: 1,
    depthSegments: 1
};

const cubePropertyFolder = cubeFolder.addFolder("properties");

cubePropertyFolder.add(cubeData, 'width', 1, 10 ).onChange(rearrangeBoxGeometry);
cubePropertyFolder.add(cubeData, 'height', 1, 10).onChange(rearrangeBoxGeometry);
cubePropertyFolder.add(cubeData, 'depth', 1, 10).onChange(rearrangeBoxGeometry);
cubePropertyFolder.add(cubeData, 'widthSegments', 1, 30).onChange(rearrangeBoxGeometry);
cubePropertyFolder.add(cubeData, 'heightSegments', 1, 30).onChange(rearrangeBoxGeometry);
cubePropertyFolder.add(cubeData, 'depthSegments', 1, 30).onChange(rearrangeBoxGeometry);


//rearrangeBoxGeometry function -->
function rearrangeBoxGeometry(){
    let newGeometry = new THREE.BoxGeometry(
        cubeData.width,
        cubeData.height,
        cubeData.depth,
        cubeData.widthSegments,
        cubeData.heightSegments,
        cubeData.depthSegments
    );
    cube.geometry.dispose();
    cube.geometry = newGeometry;
}
//& for shpere geometry 
var sphereData = {
    radius: 1,
    widthSegments: 8,
    heightSegments: 6,
    phiStart: 0,
    phiLength: Math.PI * 2,
    thetaStart: 0,
    thetaLength: Math.PI
};
const sphereFolder = gui.addFolder("Sphere")
const spherePropertiesFolder = sphereFolder.addFolder("Properties")
spherePropertiesFolder.add(sphereData, 'radius', .1, 30).onChange(regenerateSphereGeometry);
spherePropertiesFolder.add(sphereData, 'widthSegments', 1, 32).onChange(regenerateSphereGeometry);
spherePropertiesFolder.add(sphereData, 'heightSegments', 1, 16).onChange(regenerateSphereGeometry);
spherePropertiesFolder.add(sphereData, 'phiStart', 0, Math.PI * 2).onChange(regenerateSphereGeometry);
spherePropertiesFolder.add(sphereData, 'phiLength', 0, Math.PI * 2).onChange(regenerateSphereGeometry);
spherePropertiesFolder.add(sphereData, 'thetaStart', 0, Math.PI).onChange(regenerateSphereGeometry);
spherePropertiesFolder.add(sphereData, 'thetaLength', 0, Math.PI).onChange(regenerateSphereGeometry);

sphereFolder.add(sphere, 'visible', true)

function regenerateSphereGeometry() {
    let newGeometry = new THREE.SphereGeometry(
        sphereData.radius, sphereData.widthSegments, sphereData.heightSegments, sphereData.phiStart, sphereData.phiLength, sphereData.thetaStart, sphereData.thetaLength
    )
    sphere.geometry.dispose()
    sphere.geometry = newGeometry
}

//& for isosahedronGeometry
var icosahedronData = {
    radius: 1,
    detail: 0
};
const icosahedronFolder = gui.addFolder("Icosahedron")
const icosahedronPropertiesFolder = icosahedronFolder.addFolder("Properties")
icosahedronPropertiesFolder.add(icosahedronData, 'radius', .1, 10).onChange(regenerateIcosahedronGeometry);
icosahedronPropertiesFolder.add(icosahedronData, 'detail', 0, 5).step(1).onChange(regenerateIcosahedronGeometry);

function regenerateIcosahedronGeometry() {
    let newGeometry = new THREE.IcosahedronGeometry(
        icosahedronData.radius, icosahedronData.detail
    )
    icosahedron.geometry.dispose()
    icosahedron.geometry = newGeometry
}
icosahedronFolder.add(icosahedron, 'visible', true);

//! render animation function 
var animate = function () {

    requestAnimationFrame(animate)

    // cube.rotation.x += 0.01;
    // cube.rotation.y += 0.01;

    controls.update()

    renderer.render(scene, camera)

    stats.update();

}; 

//* make it resonsive ....

window.addEventListener('resize', onWindowResize, false);

function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight

    camera.updateProjectionMatrix()
    renderer.setSize(window.innerWidth, window.innerHeight);
    render();
}


function render(){
    stats.begin();
    renderer.render(scene, camera)
    stats.end();
}

// render();

animate(); 