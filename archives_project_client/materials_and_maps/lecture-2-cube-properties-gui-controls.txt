import { stat } from 'fs'
import * as THREE from '/build/three.module.js'
import { OrbitControls } from '/jsm/controls/OrbitControls'
import Stats from '/jsm/libs/stats.module'
import {GUI} from '/jsm/libs/dat.gui.module'

const scene: THREE.Scene = new THREE.Scene()

//import helper axis 
var axesHelper = new THREE.AxesHelper(5);
scene.add(axesHelper);

// scene.background = new THREE.Color(0x230000);

const camera: THREE.PerspectiveCamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 2000)

const renderer: THREE.WebGLRenderer = new THREE.WebGLRenderer({antialias: true})
renderer.setSize(window.innerWidth, window.innerHeight)
document.body.appendChild(renderer.domElement)

const controls = new OrbitControls(camera, renderer.domElement)

controls.addEventListener('change', render);

const geometry: THREE.BoxGeometry = new THREE.BoxGeometry()
const material: THREE.MeshBasicMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, wireframe: true });

const cube: THREE.Mesh = new THREE.Mesh(geometry, material)
scene.add(cube)

camera.position.z = 2

//* server stats(FPS)
const stats = Stats()
document.body.appendChild(stats.dom)

//* gui controls to the right 
const gui = new GUI();

const cubeFolder = gui.addFolder("cube");

// rotation
const rotation = cubeFolder.addFolder("rotation");
rotation.add(cube.rotation, "x", 0, Math.PI*2, 0.01);
rotation.add(cube.rotation, "y", 0, Math.PI*2, 0.01);
rotation.add(cube.rotation, "z", 0, Math.PI*2, 0.01);
//camera z position
const cameraFolder = cubeFolder.addFolder("camera");
cameraFolder.add(camera.position, 'z', 0,10, 0.01);
//cube position x, y and z
const positionFolder = cubeFolder.addFolder("Position");
positionFolder.add(cube.position, 'x', -10, 10);
positionFolder.add(cube.position, 'y', -10, 10);
positionFolder.add(cube.position, 'z', -10, 10);
//scale cube
const scaleFolder = cubeFolder.addFolder("Scale");
scaleFolder.add(cube.scale, 'x', 0, 5, .1)
scaleFolder.add(cube.scale, 'y', 0, 5, .1)
scaleFolder.add(cube.scale, 'z', 0, 5, .1)

cubeFolder.open();

//Geometries property folder
//& const geometry: THREE.BoxGeometry = new THREE.BoxGeometry()

var cubeData = {
    width: 1,
    height: 1,
    depth: 1,
    widthSegments: 1,
    heightSegments: 1,
    depthSegments: 1
};

const cubePropertyFolder = cubeFolder.addFolder("properties");

cubePropertyFolder.add(cubeData, 'width', 1, 10 ).onChange(rearrangeBoxGeometry);
cubePropertyFolder.add(cubeData, 'height', 1, 10).onChange(rearrangeBoxGeometry);
cubePropertyFolder.add(cubeData, 'depth', 1, 10).onChange(rearrangeBoxGeometry);
cubePropertyFolder.add(cubeData, 'widthSegments', 1, 30).onChange(rearrangeBoxGeometry);
cubePropertyFolder.add(cubeData, 'heightSegments', 1, 30).onChange(rearrangeBoxGeometry);
cubePropertyFolder.add(cubeData, 'depthSegments', 1, 30).onChange(rearrangeBoxGeometry);


//rearrangeBoxGeometry function -->
function rearrangeBoxGeometry(){
    let newGeometry = new THREE.BoxGeometry(
        cubeData.width,
        cubeData.height,
        cubeData.depth,
        cubeData.widthSegments,
        cubeData.heightSegments,
        cubeData.depthSegments
    );
    cube.geometry.dispose();
    cube.geometry = newGeometry;
}
// render animation function 
var animate = function () {

    requestAnimationFrame(animate)

    // cube.rotation.x += 0.01;
    // cube.rotation.y += 0.01;

    controls.update()

    renderer.render(scene, camera)

    stats.update();

}; 

//* make it resonsive ....

window.addEventListener('resize', onWindowResize, false);

function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight

    camera.updateProjectionMatrix()
    renderer.setSize(window.innerWidth, window.innerHeight);
    render();
}


function render(){
    stats.begin();
    renderer.render(scene, camera)
    stats.end();
}

// render();

animate(); 